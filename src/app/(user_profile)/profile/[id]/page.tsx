"use client";
import IconsLabel from "@/app/(onboarding)/exercise-category/IconsLabel";
import UserNavbar from "@/app/Components/UserNavbar";
import UserProfileInput from "@/app/Components/UserProfileInput";
import Image from "next/image";
import React, { useEffect, useState } from "react";
import EmblaCarousel from "@/app/Components/EmblaCarousel1";
import FitnessLevelDropdown from "./FitnessLevelDropdown";
import { useToast } from "@/components/ui/use-toast";
const Page = ({ params }: any) => {

  const apiEndpoint =  process.env.NEXT_PUBLIC_BASE_API_ENDPOINT;
  const { toast } = useToast();

  const [bioErr, setBioErr] = useState("");
  // Define your SVG component
  const YogaIcon = () => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="32"
      height="32"
      viewBox="0 0 32 32"
      fill="none"
    >
      <path
        d="M19.3326 6.66536C19.3326 7.54942 18.9814 8.39727 18.3563 9.02239C17.7312 9.64751 16.8834 9.9987 15.9993 9.9987C15.1152 9.9987 14.2674 9.64751 13.6423 9.02239C13.0172 8.39727 12.666 7.54942 12.666 6.66536C12.666 5.78131 13.0172 4.93346 13.6423 4.30834C14.2674 3.68322 15.1152 3.33203 15.9993 3.33203C16.8834 3.33203 17.7312 3.68322 18.3563 4.30834C18.9814 4.93346 19.3326 5.78131 19.3326 6.66536ZM20.666 28.6654C20.666 28.8422 20.5957 29.0117 20.4707 29.1368C20.3457 29.2618 20.1761 29.332 19.9993 29.332H8.56997C8.1561 29.332 7.7535 29.1972 7.42313 28.9479C7.09277 28.6986 6.85263 28.3484 6.73908 27.9504C6.62553 27.5524 6.64475 27.1283 6.79383 26.7422C6.94292 26.3561 7.21374 26.0291 7.5653 25.8107L11.088 23.6227C11.3769 23.4432 11.6152 23.1931 11.7805 22.8958C11.9458 22.5986 12.0326 22.2641 12.0326 21.924V21.332H13.6153C14.3225 21.3319 15.0007 21.0508 15.5006 20.5507L15.9993 20.0527L16.4973 20.5507C16.745 20.7985 17.0392 20.995 17.3629 21.1291C17.6866 21.2632 18.0336 21.3321 18.384 21.332H19.9993V21.9267C19.9994 22.2658 20.0857 22.5993 20.2502 22.8959C20.4146 23.1924 20.6517 23.4423 20.9393 23.622L24.4366 25.808C24.788 26.0274 25.0583 26.3551 25.2068 26.7418C25.3553 27.1284 25.3738 27.5529 25.2597 27.951C25.1455 28.3491 24.9048 28.6992 24.5739 28.9484C24.2431 29.1976 23.8401 29.3322 23.426 29.332H21.886C21.9593 29.1234 21.9993 28.8987 21.9993 28.6654V28.4987C21.9992 28.0143 21.8233 27.5464 21.5043 27.1818C21.1853 26.8173 20.7448 26.581 20.2646 26.5167L11.4546 25.338C11.2808 25.3174 11.1058 25.3659 10.9675 25.4732C10.8291 25.5805 10.7385 25.7379 10.7152 25.9114C10.692 26.0849 10.7379 26.2606 10.843 26.4005C10.9482 26.5405 11.1042 26.6335 11.2773 26.6594L20.088 27.838C20.248 27.8595 20.3948 27.9383 20.5011 28.0598C20.6074 28.1813 20.6659 28.3373 20.666 28.4987V28.6654ZM17.4406 19.608L16.666 18.8334V16.3387C16.7646 16.396 16.858 16.4667 16.942 16.5507L18.1946 17.804C18.3197 17.9288 18.4893 17.9988 18.666 17.9987H20.666C20.7796 17.9986 20.8913 17.9696 20.9905 17.9142C21.0897 17.8589 21.1731 17.7791 21.2328 17.6824C21.2925 17.5858 21.3265 17.4755 21.3316 17.362C21.3367 17.2485 21.3127 17.1356 21.262 17.034L20.5953 15.7007C20.5579 15.6196 20.5045 15.5469 20.4384 15.4869C20.3724 15.4269 20.2949 15.3807 20.2107 15.3511C20.1264 15.3216 20.0371 15.3093 19.948 15.3149C19.8589 15.3206 19.7718 15.3441 19.6919 15.384C19.6121 15.4239 19.5411 15.4795 19.4831 15.5474C19.4251 15.6153 19.3814 15.6941 19.3545 15.7793C19.3275 15.8644 19.318 15.954 19.3264 16.0429C19.3348 16.1318 19.3609 16.2181 19.4033 16.2967L19.5873 16.6654H18.942L17.8846 15.608C17.3846 15.1081 16.7064 14.8273 15.9993 14.8273C15.2922 14.8273 14.614 15.1081 14.114 15.608L13.0566 16.6654H12.4113L12.5953 16.2967C12.6377 16.2181 12.6638 16.1318 12.6722 16.0429C12.6806 15.954 12.6711 15.8644 12.6442 15.7793C12.6172 15.6941 12.5735 15.6153 12.5155 15.5474C12.4575 15.4795 12.3865 15.4239 12.3067 15.384C12.2268 15.3441 12.1397 15.3206 12.0506 15.3149C11.9615 15.3093 11.8722 15.3216 11.7879 15.3511C11.7037 15.3807 11.6262 15.4269 11.5602 15.4869C11.4941 15.5469 11.4407 15.6196 11.4033 15.7007L10.7366 17.034C10.6859 17.1356 10.6619 17.2485 10.667 17.362C10.6721 17.4755 10.7061 17.5858 10.7658 17.6824C10.8255 17.7791 10.909 17.8589 11.0082 17.9142C11.1073 17.9696 11.219 17.9986 11.3326 17.9987H13.3326C13.5094 17.9987 13.679 17.9284 13.804 17.8034L15.0566 16.5507C15.1413 16.4667 15.234 16.396 15.3326 16.3387V18.8334L14.558 19.608C14.308 19.8581 13.9689 19.9986 13.6153 19.9987H9.58997C9.37315 19.9987 9.15961 19.9458 8.96784 19.8447C8.77607 19.7435 8.61186 19.5971 8.48945 19.4181C8.36704 19.2392 8.29011 19.0331 8.26534 18.8177C8.24057 18.6023 8.26871 18.3841 8.3473 18.182L10.35 13.032C10.5447 12.5313 10.8862 12.101 11.3297 11.7977C11.7732 11.4943 12.298 11.332 12.8353 11.332H19.1633C19.7006 11.332 20.2254 11.4943 20.6689 11.7977C21.1124 12.101 21.4539 12.5313 21.6486 13.032L23.652 18.182C23.7306 18.3842 23.7587 18.6025 23.7339 18.818C23.7091 19.0335 23.632 19.2397 23.5094 19.4187C23.3869 19.5977 23.2225 19.7441 23.0306 19.8451C22.8386 19.9462 22.6249 19.9989 22.408 19.9987H18.3826C18.029 19.9986 17.69 19.8581 17.44 19.608"
        fill="#E5E5E5"
      />
    </svg>
  );
  // Define your SVG component
  const YogaIcon1 = () => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="22"
      height="32"
      viewBox="0 0 22 32"
      fill="none"
    >
      <path
        d="M19.1317 31.9981H2.8682C1.60452 31.9981 0.580078 30.9737 0.580078 29.71C0.580078 28.4463 1.60452 27.4219 2.8682 27.4219H19.1317C20.3954 27.4219 21.4198 28.4463 21.4198 29.71C21.4199 30.9737 20.3954 31.9981 19.1317 31.9981Z"
        fill="#E5E5E5"
      />
      <path
        d="M21.4192 29.7099C21.4192 30.3419 21.163 30.9138 20.749 31.3278C20.335 31.7418 19.7625 31.9979 19.1305 31.9979H18.2695C18.7051 31.8971 19.0943 31.6759 19.3999 31.3703C19.8247 30.9456 20.0878 30.3585 20.0878 29.7099C20.0878 28.596 19.3112 27.6622 18.2695 27.4219H19.1305C20.3947 27.4218 21.4192 28.4463 21.4192 29.7099Z"
        fill="#E5E5E5"
      />
      <path
        d="M18.2113 27.4219H3.78906C3.78906 28.3122 4.51081 29.0339 5.40112 29.0339H16.5992C17.4896 29.0339 18.2113 28.3122 18.2113 27.4219Z"
        fill="#E5E5E5"
      />
      <path
        d="M18.3005 25.0955L17.7072 19.9893C17.5396 18.5472 16.6455 17.3174 15.3756 16.7825L13.8483 16.1391C13.3146 15.9143 12.9641 15.3656 12.9641 14.7551L12.9713 13.0625H9.02921L9.0364 14.7551C9.0364 15.3657 8.68589 15.9144 8.15227 16.1391L6.6249 16.7825C5.35496 17.3174 4.46083 18.5472 4.29333 19.9893L3.70008 25.0955C3.52346 26.6156 4.63802 27.9568 6.07771 27.9568H15.9228C17.3625 27.9569 18.477 26.6156 18.3005 25.0955Z"
        fill="#E5E5E5"
      />
      <path
        d="M18.2994 25.0956L17.706 19.9894C17.5386 18.5477 16.644 17.3178 15.3742 16.7827L13.8469 16.1392C13.3131 15.9148 12.9632 15.3658 12.9632 14.7552L12.9702 13.0625H11.6984L11.6914 15.3797C11.6914 15.9902 12.042 16.5386 12.5758 16.7637L14.2311 17.5828C15.501 18.1179 16.2668 19.1716 16.4348 20.6139L17.0276 25.72C17.1284 26.5892 16.8076 27.3994 16.2453 27.9339C17.524 27.7513 18.4623 26.4998 18.2994 25.0956Z"
        fill="#E5E5E5"
      />
      <path
        d="M7.62465 20.0938L7.26408 23.9723C7.21777 24.4706 7.58564 24.9026 8.05627 24.9026H10.632C11.4753 24.9026 12.159 25.5862 12.159 26.4296C12.159 27.273 11.4753 27.9567 10.632 27.9567H6.07771C4.63802 27.9567 3.52346 26.6154 3.70008 25.0954L4.29333 20.0938H7.62465Z"
        fill="#E5E5E5"
      />
      <path
        d="M12.399 26.4016C12.4069 26.8344 12.2342 27.2269 11.9517 27.5094C11.7159 27.7453 11.404 27.9044 11.0559 27.9456C11.1047 27.796 11.1314 27.6369 11.1314 27.4707C11.1314 26.6269 10.4473 25.9435 9.6041 25.9435H7.02823C6.55779 25.9435 6.1901 25.5111 6.23635 25.0134L6.65467 20.956C6.70517 20.4661 7.11792 20.0938 7.61035 20.0938H7.86504L7.50429 23.9724C7.45804 24.4707 7.82573 24.9025 8.29617 24.9025H10.8373C11.6757 24.9024 12.384 25.5634 12.399 26.4016Z"
        fill="#E5E5E5"
      />
      <path
        d="M11.6943 26.1141C11.9045 26.0051 12.1433 25.9435 12.3964 25.9435H14.9723C15.4427 25.9435 15.8104 25.5111 15.7641 25.0134L15.3458 20.956C15.2953 20.4661 14.8826 20.0938 14.3901 20.0938H14.1355L14.4962 23.9724C14.5425 24.4707 14.1748 24.9025 13.7043 24.9025H11.1632C10.7843 24.9025 10.432 25.0375 10.1582 25.2628L11.6943 26.1141Z"
        fill="#E5E5E5"
      />
      <path
        d="M11.0005 14.2627C13.0891 14.2627 14.7823 12.5696 14.7823 10.481C14.7823 8.39237 13.0891 6.69922 11.0005 6.69922C8.9119 6.69922 7.21875 8.39237 7.21875 10.481C7.21875 12.5696 8.9119 14.2627 11.0005 14.2627Z"
        fill="#E5E5E5"
      />
      <path
        d="M14.7808 10.4802C14.7808 12.5692 13.0874 14.262 10.9991 14.262C10.1844 14.262 9.43 14.0046 8.8125 13.5665C9.14406 13.6616 9.49469 13.7123 9.85669 13.7123C11.9457 13.7123 13.6384 12.0189 13.6384 9.93062C13.6384 8.65569 13.0082 7.52844 12.0414 6.84375C13.6232 7.29644 14.7808 8.75331 14.7808 10.4802Z"
        fill="#E5E5E5"
      />
      <path
        d="M11.0009 4.80788C10.7383 4.80788 10.5254 4.595 10.5254 4.33238V0.4755C10.5254 0.212875 10.7383 0 11.0009 0C11.2635 0 11.4764 0.212875 11.4764 0.4755V4.33244C11.4764 4.595 11.2635 4.80788 11.0009 4.80788Z"
        fill="#E5E5E5"
      />
      <path
        d="M5.51846 7.97336C5.43777 7.97336 5.35608 7.9528 5.28115 7.90955L1.94096 5.98111C1.71358 5.8498 1.63558 5.55905 1.7669 5.33161C1.89808 5.10424 2.1889 5.02617 2.4164 5.15755L5.75658 7.08599C5.98396 7.2173 6.06196 7.50805 5.93065 7.73549C5.84265 7.88805 5.68277 7.97336 5.51846 7.97336Z"
        fill="#E5E5E5"
      />
      <path
        d="M19.8212 16.2312C19.7405 16.2312 19.6588 16.2106 19.5839 16.1674L16.2437 14.2389C16.0163 14.1076 15.9383 13.8169 16.0696 13.5894C16.2009 13.362 16.4916 13.284 16.7191 13.4154L20.0593 15.3438C20.2867 15.4751 20.3647 15.7659 20.2334 15.9933C20.1453 16.1459 19.9855 16.2312 19.8212 16.2312Z"
        fill="#E5E5E5"
      />
      <path
        d="M19.2576 11.1385H17.329C17.0664 11.1385 16.8535 10.9256 16.8535 10.663C16.8535 10.4004 17.0664 10.1875 17.329 10.1875H19.2576C19.5202 10.1875 19.7331 10.4004 19.7331 10.663C19.7331 10.9256 19.5202 11.1385 19.2576 11.1385Z"
        fill="#E5E5E5"
      />
      <path
        d="M4.66969 11.1385H2.74112C2.4785 11.1385 2.26562 10.9256 2.26562 10.663C2.26562 10.4004 2.4785 10.1875 2.74112 10.1875H4.66969C4.93231 10.1875 5.14519 10.4004 5.14519 10.663C5.14519 10.9256 4.93231 11.1385 4.66969 11.1385Z"
        fill="#E5E5E5"
      />
      <path
        d="M2.1791 16.2311C2.01479 16.2311 1.85491 16.1458 1.76691 15.9933C1.6356 15.7659 1.71353 15.4751 1.94097 15.3438L5.28116 13.4154C5.50841 13.284 5.79941 13.362 5.93066 13.5894C6.06197 13.8169 5.98404 14.1077 5.7566 14.2389L2.41641 16.1674C2.3416 16.2106 2.25979 16.2311 2.1791 16.2311Z"
        fill="#E5E5E5"
      />
      <path
        d="M16.4818 7.97331C16.3175 7.97331 16.1576 7.888 16.0696 7.7355C15.9383 7.50806 16.0163 7.21725 16.2437 7.086L19.5839 5.15756C19.8111 5.02619 20.1021 5.10419 20.2334 5.33163C20.3647 5.55906 20.2868 5.84988 20.0593 5.98113L16.7191 7.90956C16.6443 7.95281 16.5625 7.97331 16.4818 7.97331Z"
        fill="#E5E5E5"
      />
      <path
        d="M14.1646 5.65526C14.0839 5.65526 14.0022 5.6347 13.9273 5.59145C13.6999 5.46014 13.6219 5.16933 13.7532 4.94195L14.9987 2.78476C15.13 2.55726 15.4209 2.47933 15.6482 2.6107C15.8756 2.74201 15.9536 3.03283 15.8223 3.2602L14.5768 5.41739C14.4887 5.56995 14.3289 5.65526 14.1646 5.65526Z"
        fill="#E5E5E5"
      />
      <path
        d="M7.83475 5.65516C7.67044 5.65516 7.51063 5.56985 7.42257 5.41735L6.17707 3.26016C6.04575 3.03278 6.12369 2.74197 6.35113 2.61066C6.57844 2.47935 6.86925 2.55728 7.00063 2.78472L8.24613 4.94191C8.37744 5.16929 8.2995 5.4601 8.07207 5.59141C7.99725 5.63454 7.91544 5.65516 7.83475 5.65516Z"
        fill="#E5E5E5"
      />
    </svg>
  );
  // Define your SVG component
  const YogaIcon2 = () => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="27"
      height="24"
      viewBox="0 0 27 24"
      fill="none"
    >
      <path
        d="M19.2894 0C17.2216 0 15.2602 0.827161 13.819 2.29975C12.3715 0.827161 10.4101 0 8.32967 0C4.10618 0 0.666016 3.44027 0.666016 7.6637C0.666016 16.3551 12.9793 23.6115 13.4994 23.9185C13.5997 23.9749 13.7062 24 13.8189 24C13.9254 24 14.032 23.9749 14.1322 23.9185C14.6586 23.6115 26.9844 16.3551 26.9844 7.6637C26.9845 3.44027 23.5318 0 19.2894 0ZM21.6331 11.8684H17.7668L16.2253 14.7697C16.1062 14.9827 15.868 15.1269 15.5986 15.0955C15.3417 15.0705 15.1349 14.8887 15.066 14.6381L13.5307 8.96703L12.2712 12.8709C12.1897 13.1091 11.9767 13.2845 11.7198 13.3033C11.4628 13.3221 11.2247 13.1843 11.1119 12.9587L10.0968 10.9221L9.35112 11.9311C9.23205 12.094 9.04407 12.188 8.84358 12.188H6.01746C5.67282 12.188 5.39084 11.906 5.39084 11.5614C5.39084 11.2105 5.67282 10.9348 6.01746 10.9348H8.53027L9.69576 9.34936C9.82108 9.17388 10.0279 9.07364 10.2535 9.09871C10.4665 9.11753 10.6608 9.24911 10.761 9.44335L11.5506 11.0224L12.9855 6.57339C13.067 6.31018 13.3177 6.13476 13.5934 6.14101C13.8691 6.14727 14.1135 6.33525 14.1824 6.60472L15.8617 12.7833L16.8393 10.9473C16.9458 10.7405 17.1589 10.6151 17.3907 10.6151H21.633C21.9777 10.6151 22.2597 10.8909 22.2597 11.2418C22.2597 11.5864 21.9777 11.8684 21.6331 11.8684Z"
        fill="#E5E5E5"
      />
    </svg>
  );
  // Define your SVG component
  const YogaIcon3 = () => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="27"
      height="28"
      viewBox="0 0 27 28"
      fill="none"
    >
      <path
        d="M3.87316 11.1096C5.64441 11.1096 7.08029 9.67371 7.08029 7.90245C7.08029 6.1312 5.64441 4.69531 3.87316 4.69531C2.1019 4.69531 0.666016 6.1312 0.666016 7.90245C0.666016 9.67371 2.1019 11.1096 3.87316 11.1096Z"
        fill="#E5E5E5"
      />
      <path
        d="M26.4297 1.09871C25.5903 0.269221 24.2366 0.750541 23.4062 1.58953L15.7377 9.41549L12.9691 9.75078C12.6866 9.83782 12.2614 9.77172 12.0183 9.60335L11.6354 9.33839L17.0651 5.10818C17.8799 4.47372 18.0264 3.29795 17.391 2.48278C16.7569 1.66802 15.5812 1.52248 14.766 2.15645L9.02046 6.63262C8.66613 6.90897 8.44638 7.28897 8.35412 7.69513C8.35223 7.69891 8.34889 7.7013 8.34695 7.70513C8.34695 7.70513 6.22521 11.1272 6.22665 11.2276C5.79955 11.7936 5.71012 12.576 6.06823 13.2404L9.18594 19.0307C9.52412 19.658 10.1686 20.0148 10.8345 20.0148C11.1341 20.0148 11.4381 19.9429 11.7201 19.7907C12.6295 19.3008 12.9696 18.1665 12.4801 17.2566L11.1051 14.703L14.3041 14.8885V25.1971C14.3041 26.3772 14.7855 27.3346 15.966 27.3346C17.1464 27.3346 17.6283 26.3772 17.6283 25.1971V12.6383C17.6283 12.6088 17.6207 12.5812 17.6197 12.5518L25.8062 4.00478C26.6357 3.16579 27.2687 1.92959 26.4297 1.09871Z"
        fill="#E5E5E5"
      />
    </svg>
  );
  // Define your SVG component
  const YogaIcon4 = () => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="28"
      height="28"
      viewBox="0 0 28 28"
      fill="none"
    >
      <path
        d="M23.3133 7.78428C21.3172 3.37628 21.5459 2.98122 20.8972 2.79409L19.6496 2.37824C19.4401 2.30876 19.2115 2.32536 19.0142 2.42441C18.8169 2.52345 18.667 2.69682 18.5975 2.90637C18.5281 3.11592 18.5447 3.34449 18.6437 3.5418C18.7427 3.7391 18.9161 3.88898 19.1257 3.95847L19.9574 4.24956C20.2277 5.04383 20.6976 6.56584 20.8889 7.21456L20.5021 7.25199C20.0321 6.98635 19.4924 6.86994 18.9547 6.91821C18.4169 6.96649 17.9066 7.17717 17.4914 7.52229L17.0755 7.55556C16.8746 7.57274 16.6794 7.63137 16.5023 7.72775C16.3251 7.82414 16.1699 7.95618 16.0463 8.11557C15.9227 8.27495 15.8335 8.4582 15.7843 8.65378C15.7351 8.84935 15.727 9.053 15.7604 9.25188C15.7939 9.45075 15.8682 9.64054 15.9786 9.80928C16.089 9.97801 16.2333 10.122 16.4021 10.2322C16.571 10.3425 16.7609 10.4165 16.9598 10.4496C17.1588 10.4828 17.3624 10.4744 17.5579 10.4249C19.1922 10.0091 22.6313 9.19816 22.6313 9.19816C22.7773 9.16291 22.9136 9.09569 23.0304 9.00136C23.1473 8.90703 23.2417 8.78794 23.307 8.65267C23.3722 8.51741 23.4066 8.36935 23.4077 8.21918C23.4088 8.06901 23.3765 7.92047 23.3133 7.78428Z"
        fill="#E5E5E5"
      />
      <path
        d="M4.63355 7.78428C6.62962 3.37628 6.40091 2.98122 7.04963 2.79409L8.29718 2.37824C8.50673 2.30876 8.7353 2.32536 8.9326 2.42441C9.12991 2.52345 9.27979 2.69682 9.34927 2.90637C9.41876 3.11592 9.40215 3.34449 9.30311 3.5418C9.20406 3.7391 9.0307 3.88898 8.82115 3.95847L7.98945 4.24956C7.71915 5.04383 7.24924 6.56584 7.05795 7.21456L7.44469 7.25199C7.91471 6.98635 8.45442 6.86994 8.99216 6.91821C9.5299 6.96649 10.0402 7.17717 10.4554 7.52229L10.8713 7.55556C11.0722 7.57274 11.2674 7.63137 11.4446 7.72775C11.6217 7.82414 11.7769 7.95618 11.9005 8.11557C12.0241 8.27495 12.1133 8.4582 12.1625 8.65378C12.2117 8.84935 12.2198 9.053 12.1864 9.25188C12.1529 9.45075 12.0787 9.64054 11.9682 9.80928C11.8578 9.97801 11.7136 10.122 11.5447 10.2322C11.3758 10.3425 11.1859 10.4165 10.987 10.4496C10.788 10.4828 10.5844 10.4744 10.3889 10.4249C8.75461 10.0091 5.31554 9.19816 5.31554 9.19816C5.16956 9.16291 5.03323 9.09569 4.91638 9.00136C4.79952 8.90703 4.70507 8.78794 4.63982 8.65267C4.57458 8.51741 4.54017 8.36935 4.53909 8.21918C4.538 8.06901 4.57027 7.92047 4.63355 7.78428Z"
        fill="#E5E5E5"
      />
      <path
        d="M17.7158 7.32031C17.0296 18.307 17.5161 8.79242 17.092 26.2664C17.0991 26.5421 16.9965 26.8094 16.8066 27.0094C16.7126 27.1085 16.5999 27.188 16.4752 27.2436C16.3504 27.2991 16.2159 27.3295 16.0794 27.333C15.8037 27.3402 15.5364 27.2376 15.3363 27.0477C15.1363 26.8578 15.0199 26.5962 15.0127 26.3205L14.389 18.5482H13.5573L12.9335 26.3205C12.9263 26.5962 12.8099 26.8578 12.6099 27.0477C12.4098 27.2376 12.1426 27.3402 11.8668 27.333C11.5911 27.3259 11.3295 27.2095 11.1396 27.0094C10.9497 26.8094 10.8471 26.5421 10.8542 26.2664C10.6047 15.9991 10.6463 18.6855 10.6463 13.9739L10.2305 7.32031H12.3097L13.9731 8.15201L15.6365 7.32031H17.7158Z"
        fill="#E5E5E5"
      />
      <path
        d="M13.9734 6.48985C15.5811 6.48985 16.8844 5.18658 16.8844 3.57891C16.8844 1.97124 15.5811 0.667969 13.9734 0.667969C12.3658 0.667969 11.0625 1.97124 11.0625 3.57891C11.0625 5.18658 12.3658 6.48985 13.9734 6.48985Z"
        fill="#E5E5E5"
      />
      <path
        d="M15.6373 7.32031C15.6373 7.76147 15.4621 8.18456 15.1501 8.49651C14.8382 8.80846 14.4151 8.98371 13.9739 8.98371C13.5328 8.98371 13.1097 8.80846 12.7977 8.49651C12.4858 8.18456 12.3105 7.76147 12.3105 7.32031H15.6373Z"
        fill="#E5E5E5"
      />
      <path
        d="M26.8687 22.7109H1.07771C0.850336 22.7109 0.666016 22.8953 0.666016 23.1226V23.1268C0.666016 23.3542 0.850336 23.5385 1.07771 23.5385H26.8687C27.096 23.5385 27.2803 23.3542 27.2803 23.1268V23.1226C27.2803 22.8953 27.096 22.7109 26.8687 22.7109Z"
        fill="#E5E5E5"
      />
      <path
        d="M5.65558 18.9648H4.82389C4.36455 18.9648 3.99219 19.3372 3.99219 19.7965V26.4501C3.99219 26.9095 4.36455 27.2818 4.82389 27.2818H5.65558C6.11492 27.2818 6.48728 26.9095 6.48728 26.4501V19.7965C6.48728 19.3372 6.11492 18.9648 5.65558 18.9648Z"
        fill="#E5E5E5"
      />
      <path
        d="M3.16144 18.9648H2.32974C1.87041 18.9648 1.49805 19.3372 1.49805 19.7965V26.4501C1.49805 26.9095 1.87041 27.2818 2.32974 27.2818H3.16144C3.62078 27.2818 3.99314 26.9095 3.99314 26.4501V19.7965C3.99314 19.3372 3.62078 18.9648 3.16144 18.9648Z"
        fill="#E5E5E5"
      />
      <path
        d="M22.2897 27.2812H23.1214C23.5808 27.2812 23.9531 26.9089 23.9531 26.4496V19.796C23.9531 19.3366 23.5808 18.9643 23.1214 18.9643H22.2897C21.8304 18.9643 21.458 19.3366 21.458 19.796V26.4496C21.458 26.9089 21.8304 27.2812 22.2897 27.2812Z"
        fill="#E5E5E5"
      />
      <path
        d="M24.7858 27.2812H25.6175C26.0769 27.2812 26.4492 26.9089 26.4492 26.4496V19.796C26.4492 19.3366 26.0769 18.9643 25.6175 18.9643H24.7858C24.3265 18.9643 23.9541 19.3366 23.9541 19.796V26.4496C23.9541 26.9089 24.3265 27.2812 24.7858 27.2812Z"
        fill="#E5E5E5"
      />
    </svg>
  );
  // Define your SVG component
  const YogaIcon5 = () => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="31"
      height="31"
      viewBox="0 0 31 31"
      fill="none"
    >
      <mask
        id="mask0_6954_10441"
        maskUnits="userSpaceOnUse"
        x="0"
        y="0"
        width="31"
        height="31"
      >
        <path d="M0 0.333334H30.6667V31H0V0.333334Z" fill="white" />
      </mask>
      <g mask="url(#mask0_6954_10441)">
        <path
          d="M17.4793 15.1612L16.9839 11.8069L18.9372 12.7855L17.4793 15.1612ZM22.9848 28.9608L17.8533 17.6947L17.7691 17.1243C17.9375 17.2094 18.1182 17.2507 18.2971 17.2506C18.6924 17.2506 19.0785 17.0514 19.3003 16.6898L21.6119 12.9234C21.9722 12.3364 21.7525 11.5657 21.1364 11.257L16.0895 8.72854C15.8467 8.60683 15.5821 8.57827 15.3347 8.62744C15.1781 8.60396 11.4741 9.19998 11.4741 9.19998L9.95591 6.47957L10.7132 1.73499C10.8156 1.09368 10.3787 0.490831 9.73747 0.38847C9.09599 0.286167 8.49332 0.722986 8.39102 1.36423L7.56936 6.51132C7.5278 6.77205 7.57512 7.03918 7.70377 7.26978L10.8005 12.8185L11.6393 18.2484L8.79106 22.2776C8.58634 22.5671 8.49823 22.923 8.54405 23.2745L9.38535 29.7281C9.48645 30.503 10.1963 31.0453 10.9669 30.9449C11.7397 30.8441 12.2845 30.136 12.1837 29.3633L11.4136 23.4564L14.6655 18.8564L15.2442 18.7709C15.2655 18.8234 16.8061 22.2024 20.4166 30.1305C20.7397 30.8398 21.5764 31.1528 22.2856 30.8297C22.9948 30.5067 23.3078 29.67 22.9848 28.9608Z"
          fill="#E5E5E5"
        />
        <path
          d="M10.5128 6.06713C10.7094 7.39856 11.9481 8.31856 13.2796 8.12198C14.611 7.9254 15.531 6.68664 15.3344 5.35521C15.1378 4.02373 13.8991 3.10373 12.5676 3.30036C11.2361 3.49694 10.3162 4.73571 10.5128 6.06713Z"
          fill="#E5E5E5"
        />
      </g>
    </svg>
  );
  // Define your SVG component
  const YogaIcon6 = () => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="28"
      height="29"
      viewBox="0 0 28 29"
      fill="none"
    >
      <path
        d="M12.7436 5.9443C14.2006 5.9443 15.3818 4.76315 15.3818 3.30613C15.3818 1.84911 14.2006 0.667969 12.7436 0.667969C11.2866 0.667969 10.1055 1.84911 10.1055 3.30613C10.1055 4.76315 11.2866 5.9443 12.7436 5.9443Z"
        fill="#E5E5E5"
      />
      <path
        d="M26.2018 24.7014L25.262 15.2698C25.0606 13.1328 23.2929 11.5273 21.1504 11.5273H19.9533C19.7631 11.5273 19.5785 11.5385 19.3938 11.5665C19.5673 11.8966 19.6624 12.2714 19.6456 12.6629C19.7463 12.6518 19.847 12.6462 19.9533 12.6462H21.1504C22.7111 12.6462 24.0034 13.8209 24.1488 15.3761L24.3838 17.7088H16.7423L16.9548 15.3705C16.9716 15.1803 17.0108 14.9901 17.0611 14.8055L15.9423 14.6768C15.892 14.8726 15.8584 15.0684 15.8416 15.2698L14.7172 27.5152C14.6892 27.8229 14.913 28.097 15.2207 28.125H15.2766C15.5619 28.125 15.8025 27.9068 15.8304 27.6159L16.636 18.8276H24.49L25.0886 24.8133C24.3502 25.1097 23.8299 25.8258 23.8299 26.6649C23.8299 27.7725 24.725 28.6676 25.827 28.6676C26.9347 28.6676 27.8297 27.7725 27.8297 26.6649C27.8297 25.6915 27.1249 24.8748 26.2018 24.7014ZM25.827 27.5488C25.3459 27.5488 24.9488 27.1516 24.9488 26.6649C24.9488 26.1782 25.3459 25.7866 25.827 25.7866C26.3137 25.7866 26.7109 26.1782 26.7109 26.6649C26.7109 27.1516 26.3137 27.5488 25.827 27.5488Z"
        fill="#E5E5E5"
      />
      <path
        d="M3.5957 26.9245L6.95214 23.1709C7.14234 22.9583 7.2766 22.701 7.33813 22.4213L7.80804 20.3403L5.26273 18.2201C5.13966 18.1139 5.02219 18.002 4.92709 17.8789L4.1607 21.2577L1.09515 24.6869C0.47421 25.3806 0.535744 26.4378 1.22382 27.0588C1.46995 27.2769 1.76085 27.4112 2.06293 27.4615C2.61114 27.5566 3.19293 27.372 3.5957 26.9245Z"
        fill="#E5E5E5"
      />
      <path
        d="M8.08142 19.1146L9.35128 20.1719V26.2247C9.35128 27.1477 10.1009 27.9029 11.0295 27.9029C11.9525 27.9029 12.7077 27.1477 12.7077 26.2247V19.3887C12.7077 18.8908 12.484 18.4209 12.1036 18.1021L9.03801 15.54L11.0015 10.276L12.9539 12.8492C13.1385 13.0898 13.4126 13.252 13.7147 13.2856L17.2781 13.7051C17.3228 13.7107 17.3676 13.7107 17.4067 13.7107C17.9661 13.7107 18.4528 13.2912 18.52 12.7262C18.5927 12.1108 18.1507 11.557 17.541 11.4843L14.4475 11.1207L11.4882 7.21602C11.3036 6.88597 11.0015 6.61746 10.6211 6.4776C9.75405 6.15315 8.78628 6.59508 8.46182 7.46216C8.44224 7.5153 5.46172 15.5232 5.45221 15.5792C5.43934 15.6043 5.41025 15.7067 5.40186 15.775C5.29558 16.3567 5.50815 16.9665 5.97805 17.3581L8.08142 19.1146Z"
        fill="#E5E5E5"
      />
    </svg>
  );
  // Define your SVG component
  const YogaIcon7 = () => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="32"
      viewBox="0 0 24 32"
      fill="none"
    >
      <path
        d="M21.9158 0.00731338C16.7856 0.459446 12.9999 3.02015 10.7931 6.72205C9.31406 8.5761 6.35968 14.2365 5.28522 17.1997C3.33702 20.8845 1.63816 25.2688 0.308664 29.2211C-0.504036 31.638 3.1451 33.2147 3.96245 30.787C4.95673 27.83 6.15793 24.633 7.51536 21.6662C8.86245 24.6811 10.2313 27.6862 11.7009 30.6437C12.8401 32.9395 16.2678 30.9261 15.1328 28.638C13.6197 25.5937 12.2141 22.5006 10.8293 19.3973C10.8469 19.3373 10.8691 19.2788 10.8877 19.2193C11.1185 19.285 11.373 19.3052 11.6534 19.2519C13.7723 18.8541 15.8912 18.4573 18.0117 18.0595C18.9175 17.8893 19.2646 16.8981 19.1218 16.1046C18.6935 13.7265 17.3386 12.0721 15.6522 10.5067C15.4018 9.65522 14.5669 8.90201 13.6404 8.15345C15.5187 5.11682 18.5854 3.46866 22.577 3.11689C24.6141 2.93841 23.9354 -0.170125 21.9158 0.00731338ZM14.1954 13.5242C14.7195 14.0695 15.1654 14.6432 15.5022 15.3074C14.4769 15.4998 13.451 15.6918 12.4257 15.8842C12.943 15.0513 13.5384 14.265 14.1954 13.5242Z"
        fill="#E5E5E5"
      />
      <path
        d="M18.5823 10.817C20.0894 10.817 21.3112 9.5953 21.3112 8.08821C21.3112 6.58111 20.0894 5.35938 18.5823 5.35938C17.0753 5.35938 15.8535 6.58111 15.8535 8.08821C15.8535 9.5953 17.0753 10.817 18.5823 10.817Z"
        fill="#E5E5E5"
      />
    </svg>
  );
  // Define your SVG component
  const YogaIcon8 = () => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="20"
      height="28"
      viewBox="0 0 20 28"
      fill="none"
    >
      <path
        d="M4 11V15.9475H10V11C10 9.8955 9.1045 9 8 9H6C4.8955 9 4 9.8955 4 11Z"
        fill="#E5E5E5"
      />
      <path
        d="M4.1105 10.3711C4.0445 10.5696 4 10.7781 4 10.9986V15.9461H5V10.9986C5 10.7781 5.0445 10.5696 5.1105 10.3711H4.1105Z"
        fill="#E5E5E5"
      />
      <path
        d="M7 9C5.6195 9 4.5 7.8805 4.5 6.5C4.5 5.1195 5.6195 4 7 4C8.3805 4 9.5 5.1195 9.5 6.5C9.5 7.8805 8.3805 9 7 9Z"
        fill="#E5E5E5"
      />
      <path
        d="M4.5 6.5C4.5 5.1195 5.6195 4 7 4C8.3805 4 9.5 5.1195 9.5 6.5H4.5Z"
        fill="#E5E5E5"
      />
      <path
        d="M6.5 6.5C6.5 5.4755 7.118 4.597 8 4.211C7.6935 4.077 7.356 4 7 4C5.6195 4 4.5 5.1195 4.5 6.5C4.5 7.8805 5.6195 9 7 9C7.356 9 7.6935 8.923 8 8.789C7.118 8.403 6.5 7.5245 6.5 6.5Z"
        fill="#E5E5E5"
      />
      <path
        d="M6.5 6.5C6.5 5.4755 7.118 4.597 8 4.211C7.6935 4.077 7.356 4 7 4C5.6195 4 4.5 5.1195 4.5 6.5H6.5Z"
        fill="#E5E5E5"
      />
      <path
        d="M6 11H1C0.4475 11 0 10.5525 0 10C0 9.4475 0.4475 9 1 9H6V11Z"
        fill="#E5E5E5"
      />
      <path d="M6 11H8V12H6V11Z" fill="#E5E5E5" />
      <path
        d="M4.26322 13.9111C3.73022 14.0561 3.18072 13.7416 3.03572 13.2086L2.24822 10.3136C2.10322 9.78061 2.41772 9.23111 2.95072 9.08611C3.48372 8.94111 4.03322 9.25561 4.17822 9.78861L4.96572 12.6836C5.11022 13.2166 4.79572 13.7661 4.26322 13.9111Z"
        fill="#E5E5E5"
      />
      <path
        d="M4.00081 15.9492L2.20381 26.7767C2.09781 27.4182 2.59231 28.0017 3.24231 28.0017C3.69531 28.0017 4.09731 27.7117 4.24081 27.2822L7.00081 19.0017L9.76081 27.2822C9.90431 27.7117 10.3063 28.0017 10.7593 28.0017C11.4093 28.0017 11.9038 27.4182 11.7973 26.7772L10.0008 15.9492H4.00081Z"
        fill="#E5E5E5"
      />
      <path
        d="M3.01531 26.7767L4.81231 15.9492H4.00081L2.20381 26.7767C2.09781 27.4177 2.59231 28.0012 3.24231 28.0012C3.38331 28.0012 3.51531 27.9647 3.64031 27.9132C3.21081 27.7287 2.93331 27.2717 3.01531 26.7767Z"
        fill="#E5E5E5"
      />
      <path
        d="M10.5715 27.2805L7.811 19H7L9.76 27.2805C9.9035 27.71 10.3055 28 10.7585 28C10.9065 28 11.045 27.9665 11.172 27.912C10.8955 27.7975 10.67 27.5765 10.5715 27.2805Z"
        fill="#E5E5E5"
      />
      <path
        d="M14 9V11.5115C13.396 11.968 13 12.685 13 13.5C13 14.8805 14.1195 16 15.5 16C16.8805 16 18 14.8805 18 13.5C18 12.685 17.604 11.9675 17 11.5115V9H14Z"
        fill="#E5E5E5"
      />
      <path
        d="M17 1.5C17 0.6715 16.3285 0 15.5 0C14.6715 0 14 0.6715 14 1.5V9H17V1.5Z"
        fill="#E5E5E5"
      />
      <path
        d="M14 13.5C14 12.685 14.396 11.9675 15 11.5115V9H14V11.5115C13.396 11.968 13 12.685 13 13.5C13 14.8805 14.1195 16 15.5 16C15.6715 16 15.8385 15.9825 16 15.9495C14.859 15.718 14 14.7095 14 13.5Z"
        fill="#E5E5E5"
      />
      <path
        d="M16 0.092C15.843 0.036 15.6765 0 15.5 0C14.6715 0 14 0.6715 14 1.5V9H15V1.5C15 0.848 15.4185 0.2985 16 0.092Z"
        fill="#E5E5E5"
      />
      <path
        d="M15.5 14.5C14.9475 14.5 14.5 14.0525 14.5 13.5C14.5 12.9475 14.9475 12.5 15.5 12.5C16.0525 12.5 16.5 12.9475 16.5 13.5C16.5 14.0525 16.0525 14.5 15.5 14.5Z"
        fill="#E5E5E5"
      />
      <path d="M18 8H20V9H18V8Z" fill="#E5E5E5" />
      <path d="M18 10H20V11H18V10Z" fill="#E5E5E5" />
      <path d="M18 6H20V7H18V6Z" fill="#E5E5E5" />
    </svg>
  );
  // Define your SVG component
  const YogaIcon9 = () => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="31"
      height="30"
      viewBox="0 0 31 30"
      fill="none"
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M15.5571 28.0054H0.887443C0.581934 28.0054 0.333984 27.7574 0.333984 27.4519C0.333984 27.1464 0.581934 26.8984 0.887443 26.8984H15.1382C15.255 27.2781 15.3953 27.6478 15.5571 28.0054Z"
        fill="#E5E5E5"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M14.9863 26.3452H0.887443C0.581934 26.3452 0.333984 26.0972 0.333984 25.7917C0.333984 25.4862 0.581934 25.2383 0.887443 25.2383H14.7884C14.8327 25.6144 14.8991 25.9838 14.9863 26.3452Z"
        fill="#E5E5E5"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M2.25794 25.2377C4.42722 21.1761 10.0495 10.8237 10.0495 10.8237L10.5623 5.94744C10.5886 5.69534 10.7007 5.46012 10.8797 5.2808C11.7766 4.38309 14.6009 1.55492 15.5841 0.570313C15.8476 0.306313 16.2566 0.255948 16.5762 0.447998C16.5765 0.447998 16.9265 0.783948 16.9642 1.02387C17.0018 1.26352 16.9312 1.5076 16.7716 1.69051C15.6699 2.95157 12.8168 6.11237 12.8168 6.11237L12.5401 9.71511L16.5518 12.3936C16.6426 12.4542 16.7135 12.5405 16.7555 12.6412L17.8954 15.3811C18.0102 15.6568 18.0085 15.9673 17.8909 16.2418L17.2669 17.7004C16.7669 18.2342 16.328 18.8261 15.9621 19.4651C15.8772 19.4599 15.79 19.441 15.7028 19.4073C15.3113 19.2429 15.1402 18.8364 15.2781 18.4567L16.0424 16.3522C16.1022 16.187 16.0803 16.003 15.9829 15.8566L15.523 15.1658C15.417 15.0067 15.2365 14.9135 15.0456 14.9193C14.8547 14.9248 14.68 15.0289 14.5837 15.1938L13.0936 17.7524C13.0936 17.7524 14.6687 18.9302 15.8105 19.7407C15.3555 20.6005 15.0298 21.5395 14.8596 22.531C14.744 22.2659 14.6477 22.0423 14.5807 21.8807C14.5154 21.7238 14.3814 21.6053 14.2176 21.5597C13.3891 21.3292 11.3601 20.6108 9.85388 20.0689C9.64246 19.9928 9.40613 20.0853 9.26832 20.2627L3.83861 27.2545C3.62941 27.5238 3.31975 27.6967 2.98103 27.7332C2.64204 27.77 2.30277 27.6671 2.04098 27.4488L1.94772 27.371C1.79663 27.2448 1.69507 27.0782 1.64858 26.8981C1.60181 26.7182 1.61011 26.5248 1.67819 26.3446C1.69147 26.3097 1.70697 26.2754 1.72468 26.2417C1.86277 25.9793 2.04347 25.6392 2.25794 25.2377Z"
        fill="#E5E5E5"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M6.84311 8.29806C7.02935 8.05592 7.37692 8.01053 7.61906 8.1965C7.86147 8.38274 7.90686 8.73058 7.72062 8.97272C6.31732 10.798 5.70769 12.9762 5.89669 15.5124C5.91938 15.8171 5.69053 16.0827 5.38585 16.1054C5.08117 16.1284 4.81551 15.8993 4.79282 15.5949C4.58167 12.7634 5.27654 10.3356 6.84311 8.29806Z"
        fill="#E5E5E5"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M4.22656 14.6157C4.28689 14.9151 4.09263 15.2071 3.79321 15.2674C3.49378 15.3275 3.20156 15.1335 3.14151 14.8338C2.70068 12.6424 3.29011 10.0616 4.04973 8.88908C4.21577 8.63283 4.55892 8.5595 4.81517 8.72581C5.07142 8.89185 5.14475 9.23472 4.97871 9.49125C4.32425 10.501 3.84689 12.7282 4.22656 14.6157Z"
        fill="#E5E5E5"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M24.1334 25.3205C24.6428 25.7766 24.9636 26.4393 24.9636 27.1763C24.9636 28.5508 23.8475 29.6668 22.473 29.6668C21.0985 29.6668 19.9824 28.5508 19.9824 27.1763C19.9824 26.4393 20.3032 25.7766 20.8126 25.3205V19.7046C20.8126 19.411 20.9291 19.1295 21.1369 18.922C21.3445 18.7142 21.6259 18.5977 21.9195 18.5977H23.0264C23.3201 18.5977 23.6015 18.7142 23.809 18.922C24.0169 19.1295 24.1334 19.411 24.1334 19.7046V25.3205Z"
        fill="#E5E5E5"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M26.3471 22.7453H25.7936C25.5872 22.7453 25.3979 22.6305 25.3027 22.4475C25.2075 22.2644 25.2219 22.0435 25.3404 21.8744L27.2775 19.1071C27.381 18.9591 27.55 18.8711 27.7307 18.8711C27.9114 18.8711 28.0805 18.9591 28.184 19.1071L30.1211 21.8744C30.2396 22.0435 30.254 22.2644 30.1588 22.4475C30.0636 22.6305 29.8743 22.7453 29.6678 22.7453H29.1144V26.6195C29.1144 26.9253 28.8667 27.173 28.5609 27.173H26.9006C26.5948 27.173 26.3471 26.9253 26.3471 26.6195V22.7453Z"
        fill="#E5E5E5"
      />
      <path
        d="M15.5837 11.9565C17.112 11.9565 18.351 10.7175 18.351 9.18917C18.351 7.66083 17.112 6.42188 15.5837 6.42188C14.0554 6.42188 12.8164 7.66083 12.8164 9.18917C12.8164 10.7175 14.0554 11.9565 15.5837 11.9565Z"
        fill="#E5E5E5"
      />
      <path
        d="M22.4715 28.5603C23.2357 28.5603 23.8552 27.9408 23.8552 27.1766C23.8552 26.4124 23.2357 25.793 22.4715 25.793C21.7074 25.793 21.0879 26.4124 21.0879 27.1766C21.0879 27.9408 21.7074 28.5603 22.4715 28.5603Z"
        fill="#E5E5E5"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M21.918 20.2566C21.918 19.9511 22.1659 19.7031 22.4714 19.7031C22.7769 19.7031 23.0249 19.9511 23.0249 20.2566V26.3446C23.0249 26.6501 22.7769 26.8981 22.4714 26.8981C22.1659 26.8981 21.918 26.6501 21.918 26.3446V20.2566Z"
        fill="#E5E5E5"
      />
    </svg>
  );
  // Define your SVG component
  const YogaIcon10 = () => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="26"
      height="32"
      viewBox="0 0 26 32"
      fill="none"
    >
      <path
        d="M25.6875 11.4945C25.4 10.8383 24.6688 10.5008 23.9813 10.7008L20.2938 11.7883L17.0375 8.14453C16.5563 7.60703 15.875 7.30078 15.15 7.30078H10.8375C10.1188 7.30078 9.43126 7.60703 8.95001 8.14453L5.70001 11.7883L2.01251 10.7008C1.32501 10.5008 0.593757 10.8383 0.306257 11.4945C-0.00624251 12.2133 0.318757 13.0508 1.03751 13.3695C1.07501 13.3883 1.11251 13.4008 1.14376 13.4133L5.24376 14.8195C6.38751 15.2133 7.65001 14.8633 8.43126 13.9445L9.30001 12.9195V18.4383L6.24376 29.8883C6.00626 30.782 6.53751 31.707 7.43126 31.9445C8.31876 32.182 9.23126 31.6633 9.48126 30.7758L12.625 19.6445C12.675 19.4445 12.8813 19.3195 13.0813 19.3695C13.2125 19.4008 13.3188 19.507 13.3563 19.6445L16.5 30.7758C16.75 31.6695 17.675 32.1883 18.5688 31.9383C19.4563 31.6883 19.975 30.7758 19.7375 29.8883L16.6875 18.4383V12.907L17.5563 13.932C18.3375 14.8508 19.6 15.1945 20.7438 14.807L24.8438 13.407C25.5875 13.1508 25.9813 12.3445 25.725 11.6008C25.7188 11.5633 25.7063 11.5258 25.6875 11.4945Z"
        fill="#E5E5E5"
      />
      <path
        d="M13.0008 6.575C14.7336 6.575 16.1383 5.10314 16.1383 3.2875C16.1383 1.47186 14.7336 0 13.0008 0C11.268 0 9.86328 1.47186 9.86328 3.2875C9.86328 5.10314 11.268 6.575 13.0008 6.575Z"
        fill="#E5E5E5"
      />
    </svg>
  );
  // Define your SVG component
  const YogaIcon11 = () => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="32"
      height="32"
      viewBox="0 0 32 32"
      fill="none"
    >
      <path
        d="M7.99935 6.66797V25.3346H11.9993V17.3346H19.9993V25.3346H23.9993V6.66797H19.9993V14.668H11.9993V6.66797H7.99935ZM3.99935 20.0013C3.99935 20.3549 4.13982 20.6941 4.38987 20.9441C4.63992 21.1942 4.97906 21.3346 5.33268 21.3346H6.66602V10.668H5.33268C4.97906 10.668 4.63992 10.8084 4.38987 11.0585C4.13982 11.3085 3.99935 11.6477 3.99935 12.0013V14.668H2.66602V17.3346H3.99935V20.0013ZM27.9993 12.0013C27.9993 11.6477 27.8589 11.3085 27.6088 11.0585C27.3588 10.8084 27.0196 10.668 26.666 10.668H25.3327V21.3346H26.666C27.0196 21.3346 27.3588 21.1942 27.6088 20.9441C27.8589 20.6941 27.9993 20.3549 27.9993 20.0013V17.3346H29.3327V14.668H27.9993V12.0013Z"
        fill="#E5E5E5"
      />
    </svg>
  );

  const [selectedCategories, setSelectedCategories] = useState<any>([]);
  const [selectedCategories1, setSelectedCategories1] = useState<any>([]);
  const [edit, setEdit] = useState(false);
  const [workoutEdit, setWorkoutEdit] = useState(false);
  const [healthAssesmentEdit, setHealthAssesmentEdit] = useState(false);
  const [userProfile, setUserProfile] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [editedProfile, setEditedProfile] = useState<any>(null);
  const [error, setError] = useState<any>();
  const [error1, setError1] = useState<any>();
  const [profileChangeClick, setProfileChangeClick] = useState(false);
  const [usernameErr, setUserNameErr] = useState<string>();

  const [selectedHealthAssessments, setSelectedHealthAssessments] =
    useState<any>([]);

  //handle selected the selected Exercise category
  useEffect(() => {
    if (userProfile) {
      setEditedProfile(userProfile);
      setSelectedCategories(userProfile.workoutCategory || []);
    }
  }, [userProfile]);
  const handleCategorySelect = (category: string) => {
    setSelectedCategories((prev: any) => {
      if (prev.includes(category)) {
        return prev.filter((c: any) => c !== category);
      } else if (prev.length < 5) {
        return [...prev, category];
      } else {
        toast({
          title: "Only upto 5 Categories can be selected!",
          description: "",
          duration: 3000, // 5 seconds
        });
        return prev;
      }
    });
  };
  const handleRemoveWorkoutCategory = (indexToRemove: number) => {
    setEditedProfile((prev: any) => ({
      ...prev,
      workoutCategory: prev.workoutCategory.filter(
        (_: any, index: number) => index !== indexToRemove,
      ),
    }));
    setSelectedCategories((prev: any) =>
      prev.filter((_: any, index: number) => index !== indexToRemove),
    );
  };
  useEffect(() => {
    if (selectedCategories.length <= 15) {
      setError("");
    }
  }, [selectedCategories]);
  useEffect(() => {
    //console.log("Selected categories:", selectedCategories);
    if (selectedCategories.length <= 15) {
      setError("");
    }
  }, [selectedCategories]);

  //handle selected the selected health assesment category
  const handleCategorySelect1 = (category: string) => {
    setSelectedCategories1((prev: any) => {
      if (prev.includes(category)) {
        return prev.filter((c: any) => c !== category);
      } else if (prev.length < 15) {
        return [...prev, category];
      } else {
        setError1("You can only select up to 5 workout categories.");
        return prev;
      }
    });
  };
  useEffect(() => {
    if (selectedCategories1.length <= 15) {
      setError("");
    }
  }, [selectedCategories1]);
  useEffect(() => {
    //console.log("Selected categories:", selectedCategories1);
    if (selectedCategories1.length <= 15) {
      setError("");
    }
  }, [selectedCategories1]);

  const updateWorkoutCategories = () => {
    if (selectedCategories.length === 0) {
      toast({
        title: "Select atleast one category!",
        description: "",
        duration: 4000, // 3 seconds
      });
      return;
    }
    setEditedProfile((prev: any) => ({
      ...prev,
      workoutCategory: selectedCategories,
    }));
    setWorkoutEdit(false);
  };
  //fetching the user profile
  useEffect(() => {
    const fetchUserProfile = async () => {
      
      try {
        const response = await fetch(
          `${apiEndpoint}/api/fitnearn/web/users/profile/get-profile?userId=${params.id}`,
        );
        const data = await response.json();
        if (data.success) {
          setUserProfile(data.userProfile);
          setEditedProfile(data.userProfile);
        } else {
          //console.error("Failed to fetch user profile");
        }
      } catch (error) {
        //console.error("Error fetching user profile:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchUserProfile();
  }, [params.id]);

  const handleSave = async () => {
    const regex = /^[A-Za-z\s]*$/;
    // Trim the name to remove leading and trailing spaces
    const trimmedName = editedProfile.name.trim();

    if (!regex.test(trimmedName)) {
      setUserNameErr("Special characters and numbers are not allowed!");
      return;
    }

    // Check for empty name or only spaces
    if (trimmedName.length === 0) {
      setUserNameErr("Username cannot be empty or contain only spaces");
      return;
    }

    // Check length after trimming
    if (trimmedName.length <= 2 || trimmedName.length > 28) {
      setUserNameErr("More than 3 and less than 28 characters required");
      return;
    }

    // Additional validation to prevent consecutive spaces
    if (trimmedName.includes("  ")) {
      setUserNameErr("Consecutive spaces are not allowed");
      return;
    }
    //console.log("length of usernmae", editedProfile.name.length);
    if (editedProfile.name.length == 0) {
      setUserNameErr("More than 3 and less than 28 characters required.");
      // toast({
      //   title: "Username can not be empty",
      //   description: "Please provide a valid Name",
      //   duration: 4000, // 3 seconds
      // });
      return;
    }
    if (userProfile.bio && !regex.test(editedProfile?.bio)) {
      setBioErr("Special characters and numbers are not allowed!");
      // toast({
      //   title: "Special characters and numbers are not allowed!",
      //   description: "Please provide a valid bio",
      //   duration: 4000, // 3 seconds
      // });
      // location.reload();
      return;
    }

    if (
      (editedProfile.name && editedProfile.name.length <= 2) ||
      (editedProfile.name && editedProfile.name.length > 28)
    ) {
      setUserNameErr("More than 3 and less than 28 characters required");

      return;
    }
    //console.log("edited profile bio", editedProfile?.bio);
    if (
      userProfile.bio &&
      (!editedProfile?.bio ||
        editedProfile.bio.trim().length === 0 ||
        editedProfile.bio.trim().length <= 40)
    ) {
      setBioErr("Minimum 40 characters are required");

      return;
    }

    if (
      editedProfile?.workoutCategory &&
      editedProfile?.workoutCategory?.length === 0
    ) {
      toast({
        title: "Select atleast one Exercise category!",
        description: "",
        duration: 4000,
      });
      return;
    }

    if (
      editedProfile?.healthAssessment?.healthAssessment &&
      editedProfile?.healthAssessment?.healthAssessment.length === 0
    ) {
      toast({
        title: "Select atleast one Health assesment category!",
        description: "",
        duration: 4000,
      });
      return;
    }

    setUserNameErr("");
    setBioErr("");
    const apiUrl =
        `${apiEndpoint}/api/fitnearn/web/users/profile/edit-profile`;

    //console.log(editedProfile.fitnessLevel.fitnessLevelName);
    try {
      setLoading(true);
      const payload = {
        ...editedProfile,
        userId: userProfile.healthAssessment.userId, // Ensure userId is included in the payload
        workoutCategory: editedProfile.workoutCategory,
        healthAssessment: editedProfile.healthAssessment.healthAssessment,
        fitnessLevelName: editedProfile.fitnessLevel.fitnessLevelName,
        bioContent: editedProfile.bio,
      };
      //console.log("Payload to be sent:", payload);

      const response = await fetch(apiUrl, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(
          ` error! status: ${response.status}, message: ${errorText}`,
        );
      }

      const data = await response.json();

      if (data.success) {
        setUserProfile(editedProfile);
        setEdit(false);
        //console.log("editedProfile:", editedProfile);
      } else {
        return;
        throw new Error(data.message || "Failed to update user profile");
      }
    } catch (error: any) {
      //console.log(error);

      //console.error("Error updating user profile:", error.message);
      setError(error.message);
      return;
    } finally {
      setLoading(false);
      return;
    }
  };
  const handleInputChange = (field: string, value: any) => {
    setEditedProfile((prev: any) => {
      //to handle nested values like healAssementVal
      if (typeof value === "object" && value !== null) {
        return { ...prev, [field]: { ...prev[field], ...value } };
      }
      return { ...prev, [field]: value };
    });
  };

  const handleArrayInputChange = (field: any, index: any, value: any) => {
    setEditedProfile((prev: any) => {
      const newArray = [...prev[field]];
      newArray[index] = value;
      return { ...prev, [field]: newArray };
    });
  };

  const categories = [
    { name: "Yoga", icon: YogaIcon },
    { name: "Meditation", icon: YogaIcon1 },
    { name: "Cardio", icon: YogaIcon2 },
    { name: "KickBoxing", icon: YogaIcon3 },
    { name: "Strength", icon: YogaIcon4 },
    { name: "Dance", icon: YogaIcon5 },
    { name: "Recovery", icon: YogaIcon6 },
    { name: "Stretching", icon: YogaIcon7 },
    { name: "Warmup", icon: YogaIcon8 },
    { name: "Hiit", icon: YogaIcon9 },
    { name: "General", icon: YogaIcon10 },
  ];

  const categories1 = [
    { name: "BMI", icon: YogaIcon },
    { name: "BMR", icon: YogaIcon1 },
    { name: "TDEE", icon: YogaIcon2 },
    { name: "Body Fat %", icon: YogaIcon3 },
    { name: "Lean Body Mass", icon: YogaIcon4 },
    { name: "Weight Gain/Lost", icon: YogaIcon5 },
    { name: "Calorie Burn", icon: YogaIcon6 },
    { name: "Healthy Blood Volumn", icon: YogaIcon7 },
    { name: "Healthy Blood Pressure", icon: YogaIcon8 },
    { name: "Daily Water Intake", icon: YogaIcon9 },
    { name: "Body Water Volumn", icon: YogaIcon10 },
    { name: "Blood  Alchole Cbioncentration", icon: YogaIcon11 },
  ];
  //health assesement categories removing and adding
  useEffect(() => {
    if (userProfile) {
      setEditedProfile(userProfile);
      setSelectedCategories(userProfile.workoutCategory || []);
      setSelectedHealthAssessments(
        userProfile.healthAssessment.healthAssessment || [],
      );
    }
  }, [userProfile]);

  const handleHealthAssessmentSelect = (assessment: string) => {
    setSelectedHealthAssessments((prev: any) => {
      if (prev.includes(assessment)) {
        return prev.filter((a: any) => a !== assessment);
      } else if (prev.length < 15) {
        return [...prev, assessment];
      } else {
        setError1("You can only select up to 15 health assessment categories.");
        return prev;
      }
    });
  };

  const handleRemoveHealthAssessment = (indexToRemove: number) => {
    setEditedProfile((prev: any) => ({
      ...prev,
      healthAssessment: {
        ...prev.healthAssessment,
        healthAssessment: prev.healthAssessment.healthAssessment.filter(
          (_: any, index: number) => index !== indexToRemove,
        ),
      },
    }));
    setSelectedHealthAssessments((prev: any) =>
      prev.filter((_: any, index: number) => index !== indexToRemove),
    );
  };

  const updateHealthAssessments = () => {
    if (selectedHealthAssessments.length === 0) {
      toast({
        title: "Select atleast one category!",
        description: "",
        duration: 4000,
      });
      return;
    }
    setEditedProfile((prev: any) => ({
      ...prev,
      healthAssessment: {
        ...prev.healthAssessment,
        healthAssessment: selectedHealthAssessments,
      },
    }));
    setHealthAssesmentEdit(false);
  };
  //health assesement categories removing and adding
  //console.log(userProfile);

  const [displayName, setDisplayName] = useState("");
  useEffect(() => {
    // Check if screen width is less than or equal to 450px
    const handleResize = () => {
      if (window.innerWidth <= 450 && userProfile?.name.length > 10) {
        setDisplayName(`${userProfile?.name.slice(0, 10)}...`);
      } else {
        setDisplayName(userProfile?.name);
      }
    };

    // Initial check
    handleResize();

    // Add event listener to resize
    window.addEventListener("resize", handleResize);

    // Cleanup the event listener on component unmount
    return () => window.removeEventListener("resize", handleResize);
  }, [userProfile?.name]);

  if (loading) {
    return (
      <div className="relative pt-[832px] mq450:pt-[1120px]">
        <UserNavbar activeuser={false} />

        <div className="absolute text-white mq450:ml-3 font-Lato top-40 left-44 mq450:left-1 mq450:mt-5 w-fit">
          <div className="flex mq450:gap-[170px] gap-[1000px] mq1240:gap-[600px]">
            <div className="w-40 h-8 rounded bg-neutral-700 animate-pulse"></div>
            <div className="w-[114px] h-[41px] bg-neutral-700 rounded animate-pulse"></div>
          </div>
          <div className="flex items-center gap-5 mt-5 ml-2 mq450:flex-row mq450:gap-3">
            <div className="w-[100px] h-[100px] bg-neutral-700 rounded-full animate-pulse"></div>
            <div className="h-10 rounded bg-neutral-700 w-60 animate-pulse"></div>
          </div>
          <div className="flex gap-20 mt-5 mq450:flex-col mq450:gap-2">
            <div className="flex flex-col">
              <div className="w-20 h-6 mb-2 rounded bg-neutral-700 animate-pulse"></div>
              <div className="w-80 h-[42px] bg-neutral-700 rounded animate-pulse"></div>
            </div>
            <div className="flex flex-col">
              <div className="w-24 h-6 mb-2 rounded bg-neutral-700 animate-pulse"></div>
              <div className="w-80 h-[42px] bg-neutral-700 rounded animate-pulse"></div>
            </div>
          </div>
          <div className="mt-5">
            <div className="w-32 h-8 mb-4 rounded bg-neutral-700 animate-pulse"></div>
            <div className="grid grid-cols-3 grid-rows-2 gap-4 mq450:grid-cols-2">
              {[...Array(5)].map((_, index) => (
                <div
                  key={index}
                  className="w-full h-[42px] bg-neutral-700 rounded animate-pulse"
                ></div>
              ))}
            </div>
          </div>
          <div className="mt-5">
            <div className="w-40 h-8 mb-4 rounded bg-neutral-700 animate-pulse"></div>
            <div className="grid grid-cols-3 grid-rows-2 gap-4 mq450:grid-cols-2">
              {[...Array(5)].map((_, index) => (
                <div
                  key={index}
                  className="w-full h-[42px] bg-neutral-700 rounded animate-pulse"
                ></div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <>
      <div className="relative pt-[832px]  mq450:pt-[1120px]">
        <UserNavbar useractivecolor="neutral-700" activeuser={true} />

        <div className="absolute text-white mq450:ml-3 font-Lato top-24 left-44 mq450:left-3 mq450:mt-20 w-fit">
          <div className="flex mq450:gap-[170px] gap-[1000px] mq1240:gap-[600px]">
            <p
              className="text-2xl -[5px] text-nowrap"
              style={{ textDecorationThickness: "1px" }}
            >
              My Profile
            </p>
            <button
              onClick={() => {
                if (edit) {
                  handleSave();
                } else {
                  setEdit(true);
                }
              }}
              className=" w-[114px] mq1050:ml-[-40px] mq1240:ml-[70px] mq450:ml-[-40px] ml-[-126px] hover:border-neutral-50   hover:bg-gradient-to-r hover:from-[#F43F5E] hover:to-[#FB923C] 
 mq450:w-[70px] mq450:h-[34px] text-nowrap h-[38px] px-5 py-2.5 rounded-lg border border-neutral-600 justify-center items-center gap-2 inline-flex"
            >
              {edit ? (
                <svg
                  className="mq450:hidden"
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                >
                  <path
                    d="M3 17H10M15 16H18M18 16H21M18 16V19M18 16V13M3 12H14M3 7H14"
                    stroke="white"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </svg>
              ) : (
                <svg
                  className="mq450:hidden"
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                >
                  <path
                    d="M15.7618 18.9188C15.7618 18.9614 15.7458 19.0022 15.7173 19.0322C15.6887 19.0623 15.65 19.0792 15.6096 19.0792H4.97535C4.93498 19.0792 4.89626 19.0623 4.86771 19.0322C4.83916 19.0022 4.82312 18.9614 4.82312 18.9188V7.71491C4.82312 7.67237 4.83916 7.63157 4.86771 7.6015C4.89626 7.57142 4.93498 7.55452 4.97535 7.55452H11.5167L13.3398 5.63374H4.97535C4.4516 5.63425 3.94945 5.85368 3.5791 6.24386C3.20875 6.63404 3.00048 7.1631 3 7.71491V18.9188C3.00048 19.4706 3.20875 19.9997 3.5791 20.3899C3.94945 20.7801 4.4516 20.9995 4.97535 21H15.6096C16.1334 20.9995 16.6355 20.7801 17.0059 20.3899C17.3762 19.9997 17.5845 19.4706 17.585 18.9188V12.0271L15.7618 13.9478V18.9188Z"
                    fill="white"
                  />
                  <path
                    d="M20.1957 3.84357C19.6828 3.30343 18.9874 3 18.2623 3C17.5371 3 16.8417 3.30343 16.3288 3.84357L9.23781 11.3135C9.11071 11.4476 9.02412 11.6184 8.98895 11.8043L8.34448 15.2002C8.31744 15.3397 8.3202 15.4839 8.35256 15.6222C8.38493 15.7605 8.44608 15.8894 8.53159 15.9998C8.6171 16.1101 8.72483 16.199 8.84697 16.26C8.96912 16.321 9.10262 16.3527 9.23781 16.3527C9.29898 16.3525 9.36 16.3463 9.42012 16.3344L12.6425 15.6554C12.819 15.6181 12.9811 15.5265 13.1083 15.3923L20.1984 7.92235C20.4528 7.65454 20.6545 7.33651 20.792 6.98646C20.9296 6.63641 21.0003 6.26122 21 5.88236C20.9997 5.5035 20.9286 5.12842 20.7906 4.77857C20.6525 4.42873 20.4504 4.111 20.1957 3.84357ZM18.9067 5.20156C18.9915 5.29076 19.0587 5.39668 19.1046 5.51327C19.1505 5.62986 19.1741 5.75483 19.1741 5.88104C19.1741 6.00725 19.1505 6.13222 19.1046 6.24881C19.0587 6.3654 18.9915 6.47132 18.9067 6.56052L18.4181 7.07433L17.1292 5.71633L17.6178 5.20156C17.7887 5.02152 18.0205 4.92037 18.2623 4.92037C18.504 4.92037 18.7358 5.02152 18.9067 5.20156ZM12.0117 13.8249L10.4 14.1649L10.7227 12.466L15.8402 7.07433L17.1292 8.43232L12.0117 13.8249Z"
                    fill="white"
                  />
                </svg>
              )}
              {edit ? "Save" : "Edit"}
            </button>
          </div>
          <div className="flex items-center gap-5 mt-5 ml-2 mq450:flex-row mq450:gap-3">
            <Image
              className="rounded-[100px]"
              width={100}
              height={500}
              src={userProfile?.avatarImage?.user_image_url}
              alt=""
            />
            {edit ? (
              <>
                <div className="flex flex-col">
                  <UserProfileInput
                    maxLength={20}
                    label="Name"
                    value={editedProfile?.name}
                    onChange={(value: any) => {
                      // Always update the name
                      handleInputChange("name", value);

                      // Check if the name is empty
                      if (value.length === 0) {
                        toast({
                          title: "Name cannot be empty!",
                          description: "Please provide a valid username.",
                          duration: 4000, // 3 seconds
                        });
                      }
                      // Check if the name exceeds 16 characters
                      else if (value.length >= 28) {
                        toast({
                          title: "Name is too long!",
                          description: "Username cannot exceed 28 characters.",
                          duration: 4000,
                        });
                      }
                    }}
                  />
                  {usernameErr ? (
                    <span className="flex gap-2 mt-2">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="16"
                        height="16"
                        viewBox="0 0 16 16"
                        fill="none"
                      >
                        <path
                          d="M8.66602 9.33203H7.33268V5.9987H8.66602M8.66602 11.9987H7.33268V10.6654H8.66602M0.666016 13.9987H15.3327L7.99935 1.33203L0.666016 13.9987Z"
                          fill="#EF4444"
                        />
                      </svg>
                      <span className="text-[#EF4444] text-[12px] leading-normal font-bold font-Lato ">
                        {usernameErr}
                      </span>
                    </span>
                  ) : (
                    ""
                  )}
                  {/* <p className="text-sm text-red-400">{userNameErr}</p> */}
                </div>
              </>
            ) : (
              <p className="text-neutral-300 text-[32px] font-bold ">
                {displayName}
              </p>
            )}
            {edit && (
              <span
                onClick={() => {
                  setProfileChangeClick(!profileChangeClick);
                }}
                className="absolute left-20 top-[130px] cursor-pointer mq450:top-[120px]"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="32"
                  height="32"
                  viewBox="0 0 32 32"
                  fill="none"
                >
                  <g filter="url(#filter0_d_1550_15868)">
                    <rect
                      x="4"
                      y="4"
                      width="24"
                      height="24"
                      rx="12"
                      fill="white"
                    />
                    <path
                      d="M16 9V16M16 16V23M16 16H23M16 16H9"
                      stroke="#1F2A37"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </g>
                  <defs>
                    <filter
                      id="filter0_d_1550_15868"
                      x="0"
                      y="0"
                      width="32"
                      height="32"
                      filterUnits="userSpaceOnUse"
                      colorInterpolationFilters="sRGB"
                    >
                      <feFlood floodOpacity="0" result="BackgroundImageFix" />
                      <feColorMatrix
                        in="SourceAlpha"
                        type="matrix"
                        values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                        result="hardAlpha"
                      />
                      <feOffset />
                      <feGaussianBlur stdDeviation="2" />
                      <feComposite in2="hardAlpha" operator="out" />
                      <feColorMatrix
                        type="matrix"
                        values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"
                      />
                      <feBlend
                        mode="normal"
                        in2="BackgroundImageFix"
                        result="effect1_dropShadow_1550_15868"
                      />
                      <feBlend
                        mode="normal"
                        in="SourceGraphic"
                        in2="effect1_dropShadow_1550_15868"
                        result="shape"
                      />
                    </filter>
                  </defs>
                </svg>
              </span>
            )}
            {profileChangeClick && (
              <>
                <div className="fixed inset-0 z-50 bg-black bg-opacity-60"></div>

                <section className="userCard  absolute mq450:fixed mq450:left-8 mq450:top-20 top-20 z-50 mq1050:left-40 w-[328px] h-[440px] md:w-[495px] md:h-[396px]  left-[350px] flex justify-center flex-col  w-[328px] h-[480px] md:w-[495px] md:h-[360px] space-y-8 shadow rounded-[24px] bg-gray-900 bg-opacity-60 backdrop-blur-xl py-[40px] px-[20px] md:p-[40px]">
                  <h1 className="text-[28px] text-[#E5E5E5] font-bold font-Lato text-center md:text-left leading-normal mb-2 md:mb-1">
                    Select Avatar
                  </h1>
                  <article style={{ marginTop: "0" }}>
                    <h2 className="text-[18px] md:text-[20px] text-[#D4D4D4] text-center md:text-left font-semibold leading-normal mb-[24px]">
                      Select a free avatar from the following
                    </h2>
                    <div className="flex items-center justify-center pr-2 md:mb-2">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="31"
                        height="32"
                        viewBox="0 0 31 32"
                        fill="none"
                      >
                        <path
                          fillRule="evenodd"
                          clipRule="evenodd"
                          d="M21.5254 20.7009L23.39 13.6043L20.6651 15.3397C20.1218 15.6861 19.4642 15.8057 18.8337 15.6727C18.2032 15.5397 17.6499 15.1647 17.2928 14.6283L15.4996 11.9342L13.7051 14.6296C13.3478 15.1657 12.7945 15.5405 12.164 15.6732C11.5335 15.806 10.876 15.6863 10.3328 15.3397L7.60912 13.6043L9.47373 20.7009H21.5254ZM8.27004 12.5656C7.32604 11.9637 6.13342 12.8339 6.41773 13.9169L8.28358 21.0136C8.35265 21.2766 8.50689 21.5093 8.72221 21.6754C8.93752 21.8415 9.20179 21.9317 9.47373 21.9317H21.5254C21.7974 21.9317 22.0616 21.8415 22.2769 21.6754C22.4923 21.5093 22.6465 21.2766 22.7156 21.0136L24.5814 13.9169C24.8645 12.8339 23.6731 11.9649 22.7291 12.5656L20.0042 14.3009C19.7327 14.4743 19.404 14.5342 19.0887 14.468C18.7735 14.4017 18.4968 14.2145 18.318 13.9465L16.5236 11.2511C16.4112 11.0825 16.2589 10.9443 16.0803 10.8487C15.9016 10.7531 15.7022 10.7031 15.4996 10.7031C15.297 10.7031 15.0975 10.7531 14.9189 10.8487C14.7402 10.9443 14.588 11.0825 14.4756 11.2511L12.6811 13.9465C12.5026 14.2147 12.2259 14.4022 11.9107 14.4687C11.5954 14.5352 11.2666 14.4754 10.995 14.3022L8.27004 12.5656Z"
                          fill="url(#paint0_linear_7396_19446)"
                        />
                        <path
                          d="M16.6617 8.54857C16.6621 8.85703 16.5398 9.153 16.3219 9.37135C16.104 9.5897 15.8083 9.71255 15.4999 9.71287C15.1914 9.7132 14.8954 9.59097 14.6771 9.37309C14.4587 9.1552 14.3359 8.85949 14.3356 8.55103C14.3352 8.24256 14.4575 7.9466 14.6754 7.72825C14.8932 7.5099 15.189 7.38705 15.4974 7.38672C15.8059 7.38639 16.1018 7.50862 16.3202 7.72651C16.5385 7.9444 16.6614 8.2401 16.6617 8.54857ZM25.9614 10.876C25.9615 11.0287 25.9315 11.1799 25.8731 11.3211C25.8147 11.4622 25.7291 11.5905 25.6212 11.6985C25.5133 11.8066 25.3851 11.8923 25.244 11.9509C25.1029 12.0094 24.9517 12.0396 24.799 12.0396C24.6462 12.0397 24.495 12.0097 24.3538 11.9513C24.2127 11.893 24.0844 11.8074 23.9764 11.6994C23.8683 11.5915 23.7826 11.4633 23.724 11.3222C23.6655 11.1811 23.6353 11.0299 23.6353 10.8772C23.6353 10.5687 23.7578 10.2729 23.9759 10.0548C24.194 9.83664 24.4899 9.7141 24.7983 9.7141C25.1068 9.7141 25.4026 9.83664 25.6208 10.0548C25.8389 10.2729 25.9614 10.5675 25.9614 10.876ZM7.36326 10.876C7.36343 11.1844 7.24104 11.4803 7.02304 11.6985C6.80504 11.9168 6.50927 12.0395 6.2008 12.0396C6.04806 12.0397 5.89681 12.0097 5.75566 11.9513C5.61452 11.893 5.48626 11.8074 5.3782 11.6994C5.15997 11.4814 5.03727 11.1856 5.03711 10.8772C5.03711 10.5687 5.15965 10.2729 5.37777 10.0548C5.59589 9.83664 5.89172 9.7141 6.20019 9.7141C6.50865 9.7141 6.80449 9.83664 7.02261 10.0548C7.24073 10.2729 7.36326 10.5675 7.36326 10.876Z"
                          fill="url(#paint1_linear_7396_19446)"
                        />
                        <path
                          fillRule="evenodd"
                          clipRule="evenodd"
                          d="M9.6543 23.3849C9.6543 23.2217 9.71913 23.0652 9.83454 22.9498C9.94995 22.8344 10.1065 22.7695 10.2697 22.7695H21.0229C21.1861 22.7695 21.3426 22.8344 21.4581 22.9498C21.5735 23.0652 21.6383 23.2217 21.6383 23.3849C21.6383 23.5481 21.5735 23.7047 21.4581 23.8201C21.3426 23.9355 21.1861 24.0003 21.0229 24.0003H10.2697C10.1065 24.0003 9.94995 23.9355 9.83454 23.8201C9.71913 23.7047 9.6543 23.5481 9.6543 23.3849Z"
                          fill="url(#paint2_linear_7396_19446)"
                        />
                        <path
                          fillRule="evenodd"
                          clipRule="evenodd"
                          d="M15.4998 30.1556C23.3165 30.1556 29.6537 23.8184 29.6537 16.0018C29.6537 8.18519 23.3165 1.84796 15.4998 1.84796C7.68323 1.84796 1.346 8.18519 1.346 16.0018C1.346 23.8184 7.68323 30.1556 15.4998 30.1556ZM15.4998 31.3864C23.9971 31.3864 30.8845 24.499 30.8845 16.0018C30.8845 7.50457 23.9971 0.617188 15.4998 0.617188C7.00262 0.617188 0.115234 7.50457 0.115234 16.0018C0.115234 24.499 7.00262 31.3864 15.4998 31.3864Z"
                          fill="url(#paint3_linear_7396_19446)"
                        />
                        <defs>
                          <linearGradient
                            id="paint0_linear_7396_19446"
                            x1="5.67312"
                            y1="17.8703"
                            x2="25.2381"
                            y2="17.8755"
                            gradientUnits="userSpaceOnUse"
                          >
                            <stop stopColor="#F43F5E" />
                            <stop offset="1" stopColor="#FB923C" />
                          </linearGradient>
                          <linearGradient
                            id="paint1_linear_7396_19446"
                            x1="4.23233"
                            y1="10.3567"
                            x2="26.6657"
                            y2="10.373"
                            gradientUnits="userSpaceOnUse"
                          >
                            <stop stopColor="#F43F5E" />
                            <stop offset="1" stopColor="#FB923C" />
                          </linearGradient>
                          <linearGradient
                            id="paint2_linear_7396_19446"
                            x1="9.19337"
                            y1="23.5551"
                            x2="22.0416"
                            y2="23.5754"
                            gradientUnits="userSpaceOnUse"
                          >
                            <stop stopColor="#F43F5E" />
                            <stop offset="1" stopColor="#FB923C" />
                          </linearGradient>
                          <linearGradient
                            id="paint3_linear_7396_19446"
                            x1="-1.0682"
                            y1="20.2571"
                            x2="31.9201"
                            y2="20.2625"
                            gradientUnits="userSpaceOnUse"
                          >
                            <stop stopColor="#F43F5E" />
                            <stop offset="1" stopColor="#FB923C" />
                          </linearGradient>
                        </defs>
                      </svg>
                    </div>
                    <form className="flex flex-col items-center justify-center">
                      <div className="flex flex-wrap md:flex-nowrap justify-center items-center mb-[12px] md:mb-[23px] gap-4 ">
                        {/* avatar image selection code is here */}
                        <div className="block">
                          <EmblaCarousel options={{ loop: true }} />
                        </div>
                      </div>
                    </form>
                  </article>
                </section>
              </>
            )}
          </div>
          <div className="flex gap-20 mt-[20px] mq450:flex-col mq450:gap-2">
            <div className="flex flex-col">
              <div className="flex items-center justify-between">
                <label
                  className="py-2 text-base font-bold leading-nrmal font-Lato text-neutral-300"
                  htmlFor=""
                >
                  Email
                </label>
                <span className="px-2 mq450:px-5  text-[13px] font-semibold font-Lato text-green-700">
                  Verified
                </span>
              </div>
              <input
                disabled
                value={
                  userProfile.email
                    ? userProfile.email
                    : "Email not in api data"
                }
                className={`${
                  edit
                    ? "bg-neutral-900 border-dotted border-2"
                    : "bg-neutral-800"
                } border-neutral-600 text-neutral-400 w-80 h-[42px] p-3 rounded-lg border font-Lato flex-col justify-start items-start gap-2.5 inline-flex ${
                  edit ? "cursor-not-allowed" : "cursor-not-allowed"
                }`}
              />
            </div>
            <FitnessLevelDropdown
              editedProfile={editedProfile}
              handleInputChange={handleInputChange}
              edit={edit}
            />
          </div>
          {userProfile.bio && (
            <div className="flex flex-col mt-[10px]">
              <label
                className="py-3 text-base font-bold leading-normal text-neutral-300 font-Lato"
                htmlFor=""
              >
                Bio
              </label>
              <textarea
                maxLength={80}
                value={editedProfile?.bio}
                disabled={edit ? false : true}
                onKeyDown={(e: any) => {
                  // Prevent Enter key from creating a new line
                  if (e.key === "Enter") {
                    e.preventDefault();
                  }
                }}
                onChange={(e: any) => {
                  const inputValue = e.target.value;

                  // Always update the bio, even if it triggers an error
                  handleInputChange("bio", inputValue);

                  if (inputValue.length > 80) {
                    toast({
                      title: "Bio is too long!",
                      description: "Max 80 characters allowed.",
                      duration: 3000, // 3 seconds
                    });
                    return;
                  } else if (inputValue.length === 0) {
                    toast({
                      title: "Please enter valid Bio!",
                      description: "Min 40 characters are required.",
                      duration: 3000,
                    });
                  }
                }}
                className="bg-neutral-800 align-top resize-none  mq1240:w-[720px] text-neutral-400 w-[725px] mq1050:w-[720px] mq450:w-[317px] h-[64px] mq450:h-[95px] p-2 focus:outline-none focus:border-neutral-300 focus:outline-none focus:ring-0 rounded-lg border border-neutral-600 flex-col justify-start items-start gap-2.5 inline-flex curs"
              />
              {bioErr ? (
                <span className="flex gap-2 mt-2 ">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 16 16"
                    fill="none"
                  >
                    <path
                      d="M8.66602 9.33203H7.33268V5.9987H8.66602M8.66602 11.9987H7.33268V10.6654H8.66602M0.666016 13.9987H15.3327L7.99935 1.33203L0.666016 13.9987Z"
                      fill="#EF4444"
                    />
                  </svg>
                  <span className="text-[#EF4444] text-[12px] leading-normal font-bold font-Lato ">
                    {bioErr}
                  </span>
                </span>
              ) : (
                ""
              )}
              <span className="p-2 ml-[600px] mq1240:ml-[596px] mq1050:ml-[600px] text-sm ml- text-neutral-400 mq450:ml-[200px]">
                Max 80 Characters
              </span>
            </div>
          )}

          <div className={`${userProfile.bio ? "mt-[0px]" : "mt-[35px]"}`}>
            <p
              className="text-2xl -[9px] "
              style={{ textDecorationThickness: "1px" }}
            >
              Category
            </p>
            <div className="grid grid-cols-3 grid-rows-2 gap-[0px_70px] mq1050:gap-[0px_20px] mq450:grid-cols-2 mq450:gap-2">
              {editedProfile.workoutCategory.map(
                (category: any, index: any) => (
                  <UserProfileInput
                    key={index}
                    value={category}
                    flag={edit}
                    disabled={true}
                    enableTruncation={true}
                    truncationLength={12}
                    truncationBreakpoint={450}
                    onChange={(newValue: any) =>
                      handleArrayInputChange("workoutCategory", index, newValue)
                    }
                    onRemove={() => handleRemoveWorkoutCategory(index)}
                  />
                ),
              )}
              {edit ? (
                <div
                  onClick={() => {
                    setWorkoutEdit(!workoutEdit);
                  }}
                  className="flex items-center justify-center w-10 h-10 mt-4 border rounded-full cursor-pointer mq450:mx-auto bg-neutral-800 border-neutral-600"
                >
                  <span className="text-3xl leading-none">+</span>
                </div>
              ) : (
                ""
              )}
            </div>
            {workoutEdit && (
              <>
                <div className="fixed inset-0 z-50 bg-black bg-opacity-60"></div>

                <section className="w-[902px] mq1050:left-16 mq450:top-[10px] fixed mq450:fixed  top-[30px] z-50 left-[260px]  mq450:h-[620px] mq450:px-3 mq450:top-2  mq450:w-[350px] mq450:left-4  [backdrop-filter:blur(100px)] rounded-3xl [background:linear-gradient(157.48deg,_rgba(77,_77,_77,_0.59),_rgba(140,_140,_140,_0.53))] overflow-hidden shrink-0 flex flex-col items-center justify-start py-5 px-11 box-border max-w-full  text-left text-[28px] text-neutral-200 font-Lato  mq900:py-[26px] mq900:px-[22px] mq900:box-border mq450:align-center mq450:items-center">
                  <div className="self-stretch flex flex-col items-center justify-start gap-[12px] max-w-full mq450:gap-[10px]">
                    <div className="self-stretch flex flex-col items-center justify-start gap-[1px]">
                      <div className="flex flex-col items-center self-stretch justify-start px-5 py-0">
                        <h1 className="m-0 relative font-Lato text-inherit font-semibold  mq450:text-[22px]">
                          Exercise Category
                        </h1>
                      </div>
                      <h3 className="m-0 self-stretch relative text-[20px] font-normal font-inherit text-neutral-300 text-center mq450:text-[16px]">
                      Select your favorite exercise category (Upto 5)
                      </h3>
                    </div>
                    <div className="self-stretch mq450:pr-3  mq450:justify-start mq450:grid mq450:grid-cols-2 mq450:gap-10 flex flex-row flex-wrap mq450:h-[450px] mq450:overflow-y-scroll items-start justify-start gap-[10px_47.3px] min-h-[469px] mq450:min-h-[450px] text-sm mq700:gap-[24px]">
                      {categories.map((category) => (
                        <IconsLabel
                          key={category.name}
                          name={category.name}
                          SvgIcon={category.icon}
                          isSelected={selectedCategories.includes(
                            category.name,
                          )}
                          onClick={() => handleCategorySelect(category.name)}
                        />
                      ))}
                    </div>
                    {/* <div className="text-white">
                    Selected categories: {selectedCategories.join(", ")}
                  </div> */}
                    {error && <p className="text-red-500">{error}</p>}

                    <div
                      onClick={updateWorkoutCategories}
                      className="w-[393px] flex flex-col   items-center  justify-start max-w-full cursor-pointer text-[24px] text-shade-01 "
                    >
                      <div className=" self-stretch rounded-lg hover:shadow-[inset_0_0_0_1px_#FFFFFF] bg-gradient-to-r from-rose-500 to-orange-400   flex flex-row items-center justify-center hover:border-neutral-50 py-[7px] px-5 whitespace-nowrap">
                        <h2 className="m-0 relative text-[18px] text-inherit font-semibold font-inherit inline-block min-w-[98px]">
                          Continue
                        </h2>
                      </div>
                    </div>
                  </div>
                </section>
              </>
            )}
          </div>
          <div
            className={`${selectedCategories.length <= 3 ? "mb-0" : "mt-6"} ${selectedCategories.length === 3 && window.innerWidth <= 450 ? "mt-6" : ""}`}
          >
            <p
              className="text-2xl font-Lato -[5px] "
              style={{ textDecorationThickness: "1px" }}
            >
              Health Assesment
            </p>
            
            <div className="grid grid-cols-3 grid-rows-2 mq450:grid-cols-2 gap-[0px_70px] mq1050:gap-[0px_20px]  mq450:gap-2">
              {editedProfile.healthAssessment.healthAssessment.map(
                (assessment: any, index: any) => (
                  <UserProfileInput
                    key={index}
                    value={`${assessment}`}
                    flag={edit}
                    disabled={true}
                    enableTruncation={true}
                    truncationLength={12}
                    truncationBreakpoint={450}
                    onChange={(newValue: any) =>
                      handleArrayInputChange(
                        ["healthAssessment", "healthAssessment"],
                        index,
                        newValue,
                      )
                    }
                    onRemove={() => handleRemoveHealthAssessment(index)}
                  />
                ),
              )}
              {edit ? (
                <div
                  onClick={() => {
                    setHealthAssesmentEdit(!healthAssesmentEdit);
                  }}
                  className="flex items-center justify-center w-10 h-10 mt-6 border rounded-full cursor-pointer mq450:mx-auto bg-neutral-800 border-neutral-600"
                >
                  <span className="text-3xl leading-none">+</span>
                </div>
              ) : (
                ""
              )}
            </div>
            {healthAssesmentEdit && (
              <>
                <div className="fixed inset-0 z-50 bg-black bg-opacity-60"></div>
                <section className="w-[902px] fixed mq450:fixed mq450:left-0 mq450:left-4 z-50 mq450:top-8   top-10 left-[280px] mq450:h-[590px] mq450:px-3 mq450:w-[348px] mq1050:left-16 [backdrop-filter:blur(100px)] rounded-3xl [background:linear-gradient(157.48deg,_rgba(77,_77,_77,_0.59),_rgba(140,_140,_140,_0.53))] overflow-hidden shrink-0 flex flex-col items-center justify-start py-5 px-11 box-border max-w-full  text-left text-[28px] text-neutral-200 font-Lato  mq900:py-[26px] mq900:px-[22px] mq900:box-border">
                  <div className="self-stretch flex flex-col items-center justify-start gap-[16px] max-w-full mq450:gap-[8px]">
                    <div className="self-stretch flex flex-col items-center justify-start gap-[8px]">
                      <div className="flex flex-col items-center self-stretch justify-start px-5 py-0">
                        <h1 className="m-0 font-Lato text-[28px] relative   font-bold font-inherit mq450:text-[24px] mq450:text-nowrap">
                          Health Assesment
                        </h1>
                      </div>
                      <h3 className="m-0 self-stretch relative text-[20px] mq450:hidden font-semibold font-inherit text-neutral-300 text-center mq450:text-[16px]">Know about your health today to take action tomorrow</h3>
                    </div>
                    <div className="self-stretch mq450:pr-3 mq450:justify-center mq450:grid mq450:grid-cols-2  flex flex-row flex-wrap mq450:h-[450px] mq450:overflow-y-scroll  items-center justify-center mq450:gap-8 gap-[10px_47.3px] mq450:min-h-[300px] min-h-[469px] text-sm mq700:gap-[24px]">
                      {categories1.map((category) => (
                        <IconsLabel
                          key={category.name}
                          name={category.name}
                          SvgIcon={category.icon}
                          isSelected={selectedHealthAssessments.includes(
                            category.name,
                          )}
                          onClick={() =>
                            handleHealthAssessmentSelect(category.name)
                          }
                        />
                      ))}
                    </div>

                    {error && <p className="text-red-500">{error}</p>}

                    <div
                      onClick={updateHealthAssessments}
                      className="w-[393px] border-1-white border-white  flex flex-col items-center justify-start max-w-full cursor-pointer text-[24px] text-shade-01"
                    >
                      <div className="self-stretch hover:shadow-[inset_0_0_0_1px_#FFFFFF] rounded-lg bg-gradient-to-r from-rose-500 to-orange-400 flex flex-row items-center justify-center py-[7px] px-5 whitespace-nowrap">
                        <h2 className="m-0 text-[18px] relative text-inherit font-semibold font-inherit inline-block min-w-[98px]">
                          Continue{" "}
                        </h2>
                      </div>
                    </div>
                  </div>
                </section>
              </>
            )}
          </div>
        </div>
      </div>

      <style jsx global>{`
        body {
          font-family: Lato;
        }
      `}</style>
    </>
  );
};

export default Page;
